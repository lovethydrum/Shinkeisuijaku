import pygame
import time
import random
# Code to avoid scaling! #
import ctypes
ctypes.windll.user32.SetProcessDPIAware()

# Create game windows
pygame.init()
info = pygame.display.Info()
screen_width, screen_height = info.current_w, info.current_h
window_width, window_height = screen_width - 265, screen_height - 50
game_window = pygame.display.set_mode((window_width, window_height))
pygame.display.set_caption("Memory Game")
cream_surface = pygame.Surface((6000, 6000))
cream_surface.fill((239, 222, 205))
# game_window.fill((255, 255, 255))

game_window.blit(cream_surface, (0, 0))

font = pygame.font.Font('MitsuEHandwriting-R.otf', 30)
end_font = pygame.font.Font('MitsuEHandwriting-R.otf', 100)
flip_count = 0
alphabet_list = ["A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T",
                 "U",
                 "V", "W", "X", "Y", "Z", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o",
                 "p", "q", "r", "s", "t", "u",
                 "v", "w", "x", "y", "z"]

BLACK = (0, 0, 0)
RED = (255, 0, 0)


class Cards:
    def __init__(self, x, y):
        self.color = (255, 105, 97)
        self.lower_color = (124, 185, 232)
        self.x = x
        self.y = y
        self.letter = ""
        self.width = 100
        self.height = 120
        self.clicked_color = (211, 211, 211)
        self.clicked = False
        self.rect = pygame.Rect(self.x, self.y, self.width, self.height)

    def draw_card(self):
        if self.letter.islower():
            pygame.draw.rect(game_window, self.lower_color, (self.x, self.y, self.width, self.height))
            pygame.draw.rect(game_window, BLACK, (self.x, self.y, self.width, self.height), 4)
        else:
            pygame.draw.rect(game_window, self.color, (self.x, self.y, self.width, self.height))
            pygame.draw.rect(game_window, BLACK, (self.x, self.y, self.width, self.height), 4)

    def flip_card(self):
        pygame.draw.rect(game_window, self.clicked_color, (self.x, self.y, self.width, self.height))
        pygame.draw.rect(game_window, BLACK, (self.x, self.y, self.width, self.height), 4)
        reveal_letter = font.render(self.letter, True, (0, 0, 0), )
        game_window.blit(reveal_letter, (self.x + 45, self.y + 40))
        global flip_count
        flip_count += 1


attempt_count = 0


def increase_attempt_count():
    return attempt_count + 1


# Y coordinates
ROW_1 = 15
ROW_2 = ROW_1 + 125
ROW_3 = ROW_2 + 125
ROW_4 = ROW_3 + 125
ROW_5 = ROW_4 + 125
ROW_6 = ROW_5 + 125
ROW_7 = ROW_6 + 125
ROW_8 = ROW_7 + 125

# X coordinates
COL_1 = 25
COL_2 = COL_1 + 200
COL_3 = COL_2 + 200
COL_4 = COL_3 + 200
COL_5 = COL_4 + 200
COL_6 = COL_5 + 200
COL_7 = COL_6 + 200
COL_8 = COL_7 + 200

# Alternate X coordinates for rows with 6
ALT_COL_1 = COL_1 + 100
ALT_COL_2 = COL_2 + 100
ALT_COL_3 = COL_3 + 100
ALT_COL_4 = COL_4 + 100
ALT_COL_5 = COL_5 + 100
ALT_COL_6 = COL_6 + 100
ALT_COL_7 = COL_7 + 100

# Card list
card_1 = Cards(COL_1, ROW_1)
card_2 = Cards(COL_2, ROW_1)
card_3 = Cards(COL_3, ROW_1)
card_4 = Cards(COL_4, ROW_1)
card_5 = Cards(COL_5, ROW_1)
card_6 = Cards(COL_6, ROW_1)
card_7 = Cards(COL_7, ROW_1)
card_8 = Cards(ALT_COL_1, ROW_2)
card_9 = Cards(ALT_COL_2, ROW_2)
card_10 = Cards(ALT_COL_3, ROW_2)
card_11 = Cards(ALT_COL_4, ROW_2)
card_12 = Cards(ALT_COL_5, ROW_2)
card_13 = Cards(ALT_COL_6, ROW_2)
card_14 = Cards(COL_1, ROW_3)
card_15 = Cards(COL_2, ROW_3)
card_16 = Cards(COL_3, ROW_3)
card_17 = Cards(COL_4, ROW_3)
card_18 = Cards(COL_5, ROW_3)
card_19 = Cards(COL_6, ROW_3)
card_20 = Cards(COL_7, ROW_3)
card_21 = Cards(ALT_COL_1, ROW_4)
card_22 = Cards(ALT_COL_2, ROW_4)
card_23 = Cards(ALT_COL_3, ROW_4)
card_24 = Cards(ALT_COL_4, ROW_4)
card_25 = Cards(ALT_COL_5, ROW_4)
card_26 = Cards(ALT_COL_6, ROW_4)
card_27 = Cards(COL_1, ROW_5)
card_28 = Cards(COL_2, ROW_5)
card_29 = Cards(COL_3, ROW_5)
card_30 = Cards(COL_4, ROW_5)
card_31 = Cards(COL_5, ROW_5)
card_32 = Cards(COL_6, ROW_5)
card_33 = Cards(COL_7, ROW_5)
card_34 = Cards(ALT_COL_1, ROW_6)
card_35 = Cards(ALT_COL_2, ROW_6)
card_36 = Cards(ALT_COL_3, ROW_6)
card_37 = Cards(ALT_COL_4, ROW_6)
card_38 = Cards(ALT_COL_5, ROW_6)
card_39 = Cards(ALT_COL_6, ROW_6)
card_40 = Cards(COL_1, ROW_7)
card_41 = Cards(COL_2, ROW_7)
card_42 = Cards(COL_3, ROW_7)
card_43 = Cards(COL_4, ROW_7)
card_44 = Cards(COL_5, ROW_7)
card_45 = Cards(COL_6, ROW_7)
card_46 = Cards(COL_7, ROW_7)
card_47 = Cards(ALT_COL_1, ROW_8)
card_48 = Cards(ALT_COL_2, ROW_8)
card_49 = Cards(ALT_COL_3, ROW_8)
card_50 = Cards(ALT_COL_4, ROW_8)
card_51 = Cards(ALT_COL_5, ROW_8)
card_52 = Cards(ALT_COL_6, ROW_8)

card_list = [card_1, card_2, card_3, card_4, card_5, card_6, card_7, card_8, card_9, card_10, card_11, card_12, card_13,
             card_14, card_15, card_16, card_17, card_18, card_19, card_20, card_21, card_22, card_23, card_24, card_25,
             card_26, card_27, card_28, card_29, card_30, card_31, card_32, card_33, card_34, card_35, card_36, card_37,
             card_38, card_39, card_40, card_41, card_42, card_43, card_44, card_45, card_46, card_47, card_48, card_49,
             card_50, card_51, card_52]


class Players:
    def __init__(self, name, y):
        self.score = 0
        self.name = name
        self.x = 1340
        self.y = y
        self.box_width = 300
        self.box_height = 180
        self.letter_bank = ""
        self.letter_bank_2 = ""
        self.letter_bank_3 = ""
        self.letter_bank_4 = ""
        self.letter_bank_5 = ""

    def increase_score(self):
        self.score = self.score + 1
        if self.score <= 6:
            self.letter_bank = self.letter_bank + choices[0].letter.upper() + ", "
        elif self.score <= 12:
            self.letter_bank_2 = self.letter_bank_2 + choices[0].letter.upper() + ", "
        elif self.score <= 18:
            self.letter_bank_3 = self.letter_bank_3 + choices[0].letter.upper() + ", "
        elif self.score <= 24:
            self.letter_bank_4 = self.letter_bank_4 + choices[0].letter.upper() + ", "
        else:
            self.letter_bank_5 = self.letter_bank_5 + choices[0].letter.upper() + ", "
        pygame.draw.rect(game_window, (255, 255, 255), (self.x, self.y, self.box_width, self.box_height))
        pygame.draw.rect(game_window, BLACK, (self.x, self.y, self.box_width, self.box_height), 5)
        bank_letters = font.render(f"{self.letter_bank}", True, (0, 0, 0), )
        game_window.blit(bank_letters, (self.x + 13, self.y))
        bank_letters_2 = font.render(f"{self.letter_bank_2}", True, (0, 0, 0), )
        game_window.blit(bank_letters_2, (self.x + 13, self.y + 35))
        bank_letters_3 = font.render(f"{self.letter_bank_3}", True, (0, 0, 0), )
        game_window.blit(bank_letters_3, (self.x + 13, self.y + 70))
        bank_letters_4 = font.render(f"{self.letter_bank_4}", True, (0, 0, 0), )
        game_window.blit(bank_letters_4, (self.x + 13, self.y + 105))
        bank_letters_5 = font.render(f"{self.letter_bank_5}", True, (0, 0, 0), )
        game_window.blit(bank_letters_5, (self.x + 13, self.y + 140))


def generate_players(list_of_players):
    for players in list_of_players:
        player_font = font.render(f"{players.name}:  {players.score}", True, (0, 0, 0), )
        game_window.blit(player_font, (players.x, players.y - 49))
        pygame.draw.rect(game_window, (255, 255, 255), (players.x, players.y, players.box_width, players.box_height))
        pygame.draw.rect(game_window, BLACK, (players.x, players.y, players.box_width, players.box_height), 5)
        bank_letters = font.render(f"{players.letter_bank}", True, (0, 0, 0), )
        game_window.blit(bank_letters, (players.x + 13, players.y))
        bank_letters_2 = font.render(f"{players.letter_bank_2}", True, (0, 0, 0), )
        game_window.blit(bank_letters_2, (players.x + 13, players.y + 35))
        bank_letters_3 = font.render(f"{players.letter_bank_3}", True, (0, 0, 0), )
        game_window.blit(bank_letters_3, (players.x + 13, players.y + 70))
        bank_letters_4 = font.render(f"{players.letter_bank_4}", True, (0, 0, 0), )
        game_window.blit(bank_letters_4, (players.x + 13, players.y + 105))
        bank_letters_5 = font.render(f"{players.letter_bank_5}", True, (0, 0, 0), )
        game_window.blit(bank_letters_5, (players.x + 13, players.y + 140))


# Create players
current_player = 0
player_count = 1

player_1 = Players("Player 1", 55)
player_2 = Players("Player 2", 300)
player_3 = Players("Player 3", 550)
player_4 = Players("Player 4", 800)

player_list = [player_1, player_2, player_3, player_4]


generate_players(player_list)


# Generate a letter for each card
random.shuffle(alphabet_list)
random.shuffle(card_list)
for entries in range(0, 52):
    card_list[entries].letter = alphabet_list[entries]

for item in card_list:
    item.draw_card()

pygame.display.update()
game_running = True
game_state = "selection"
choices = []
while game_running:
    ev = pygame.event.get()
    pygame.display.update()
# Game state
    if game_state == "selection":
        pygame.draw.rect(game_window, (127, 255, 127), (200, 200, 1300, 500))
        pygame.draw.rect(game_window, BLACK, (200, 200, 1300, 500), 7)

        single = Cards(330, 500)
        double = Cards(630, 500)
        triple = Cards(930, 500)
        quadruple = Cards(1230, 500)
        selection_list = [single, double, triple, quadruple]
        selection_text = end_font.render("How many Players?", True, (0, 0, 0), )
        one_text = font.render("ONE", True, (0, 0, 0), )
        two_text = font.render("TWO", True, (0, 0, 0), )
        three_text = font.render("THREE", True, (0, 0, 0), )
        four_text = font.render("FOUR", True, (0, 0, 0), )
        game_window.blit(selection_text, (340, 200))
        game_window.blit(one_text, (342, 450))
        game_window.blit(two_text, (638, 450))
        game_window.blit(three_text, (923, 450))
        game_window.blit(four_text, (1232, 450))
        for items in selection_list:
            items.draw_card()
        for event in ev:
            if event.type == pygame.MOUSEBUTTONDOWN:
                if single.rect.collidepoint(event.pos):
                    player_list.remove(player_2)
                    player_list.remove(player_3)
                    player_list.remove(player_4)
                    game_state = "game"
                    game_window.blit(cream_surface, (0, 0))
                    generate_players(player_list)
                    for item in card_list:
                        item.draw_card()
                if double.rect.collidepoint(event.pos):
                    player_list.remove(player_3)
                    player_list.remove(player_4)
                    player_count = 2
                    game_state = "game"
                    game_window.blit(cream_surface, (0, 0))
                    generate_players(player_list)
                    for item in card_list:
                        item.draw_card()
                if triple.rect.collidepoint(event.pos):
                    player_list.remove(player_4)
                    player_count = 3
                    game_state = "game"
                    game_window.blit(cream_surface, (0, 0))
                    generate_players(player_list)
                    for item in card_list:
                        item.draw_card()
                if quadruple.rect.collidepoint(event.pos):
                    player_count = 4
                    game_state = "game"
                    game_window.blit(cream_surface, (0, 0))
                    generate_players(player_list)
                    for item in card_list:
                        item.draw_card()
# Game state end
    elif game_state == "game":
        # Current Player Display
        if current_player == 0:
            pygame.draw.rect(game_window, RED, (1335, 5, 145, 48), 5)
        elif current_player == 1:
            pygame.draw.rect(game_window, RED, (1335, 250, 148, 48), 5)
        elif current_player == 2:
            pygame.draw.rect(game_window, RED, (1335, 500, 148, 48), 5)
        elif current_player == 3:
            pygame.draw.rect(game_window, RED, (1335, 750, 148, 48), 5)
        for event in ev:
            # Game Completion Prompt
            if len(card_list) == 0:
                pygame.draw.rect(game_window, (0, 0, 255), (100, 200, 1300, 500))
                congratulations_text = end_font.render("Congratulations!", True, (0, 0, 0), )
                ending_text = end_font.render(f"Total attempts:  {attempt_count}", True, (0, 0, 0), )
                game_window.blit(congratulations_text, (310, 200))
                game_window.blit(ending_text, (190, 450))
            # Player makes their selections
            if flip_count == 2:
                time.sleep(1)
                attempt_count = increase_attempt_count()
                for item in card_list:
                    if item.clicked:
                        choices.append(item)
            # The choice is good!
                if choices[0].letter.lower() == choices[1].letter.lower():
                    player_list[current_player].increase_score()
                    card_list.remove(choices[0])
                    card_list.remove(choices[1])
            # The choice is not so good...
                elif choices[0].letter.lower() != choices[1].letter.lower():
                    current_player = current_player + 1
                    if current_player == player_count:
                        current_player = 0
                game_window.blit(cream_surface, (0, 0))
                generate_players(player_list)
                for item in card_list:
                    item.draw_card()
                    item.clicked = False
                choices = []
                flip_count = 0
            # Click a card
            if event.type == pygame.MOUSEBUTTONDOWN:
                for item in card_list:
                    if item.rect.collidepoint(event.pos):
                        if not item.clicked:
                            item.flip_card()
                            item.clicked = True
                    else:
                        pass
            elif event.type == pygame.QUIT:
                game_running = False
            pygame.display.update()
    pygame.display.update()
# TODO
# add winner's name
